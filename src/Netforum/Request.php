<?php
namespace Netforum; use Netforum\Traits\SingletonTrait; use Netforum\Exceptions\RuntimeException; class Request extends \SoapClient { use SingletonTrait; protected $config; protected $token; protected $ssoToken; protected $cstToken; public function __construct($speb990b, array $sp315b9a) { $this->config = (object) $sp315b9a; $this->wsdl = $speb990b; $this->wsdl_params = $this->constructParams($sp315b9a); parent::__construct($speb990b, $this->wsdl_params); return $this; } public function getTimeout() { return (int) $this->config->timeout; } public function setTimeout(int $spc3e98a) { $this->config->timeout = $spc3e98a; } public function getSoapVersion() { return SOAP_1_2; } protected function constructParams(array $spe65e2f) { if ($this->config->debug) { $spe65e2f += array('trace' => true); } $spe65e2f += array('exceptions' => true, 'soap_version' => $this->getSoapVersion(), 'connection_timeout' => $this->getTimeout(), 'default_socket_timeout' => $this->getTimeout(), 'cache_wsdl' => WSDL_CACHE_BOTH, 'features' => SOAP_SINGLE_ELEMENT_ARRAYS, 'encoding' => 'UTF-8', 'user_agent' => 'NetForum Api (Simple) by FusionSpan llc.'); return array_filter($spe65e2f); } public function __doRequest($sp27d6b0, $spa7d240, $spe0893c, $sp8faf67, $sp588b35 = 0) { ini_set('default_socket_timeout', $this->getTimeout()); if ($this->config->debug) { dd(colorize(' >>> Sending Request _______', 'blue')); dd(colorize('Params: 
Request: ' . prettyXML($sp27d6b0) . "\nLocation: {$spa7d240}\nAction: {$spe0893c}\nVersion: {$sp8faf67}", 'blue')); dd(colorize('________________', 'blue') . '

'); } return parent::__doRequest($sp27d6b0, $spa7d240, $spe0893c, $sp8faf67); } public function auth() { $sp8198cb = $this->request('Authenticate', array('parameters' => array('userName' => $this->config->username, 'password' => $this->config->password))); if (is_object($sp8198cb)) { $this->token = $sp8198cb->AuthenticateResult; } return $this; } public function authSso($sp9b6b45 = null, $spfe27f3 = null) { if (is_null($sp9b6b45) && is_null($spfe27f3) && !$this->config->credentials) { throw new \Exception('Client credentials are required.'); } if (is_null($sp9b6b45) && is_null($spfe27f3) && $this->config->credentials) { $sp9b6b45 = $this->config->credentials['username']; $spfe27f3 = $this->config->credentials['password']; } $sp8198cb = $this->auth()->request('GetSignOnToken', array('parameters' => array('Email' => $sp9b6b45, 'Password' => $spfe27f3, 'Minutes' => $this->config->ttl))); if (is_object($sp8198cb) && isset($sp8198cb->GetSignOnTokenResult)) { $this->ssoToken = array_pop(explode('=', $sp8198cb->GetSignOnTokenResult)); } return $this; } public function authCST() { $sp8198cb = $this->auth()->request('GetCstKeyFromSignOnToken', array('parameters' => array('szEncryptedSingOnToken' => $this->ssoToken))); if (is_object($sp8198cb)) { $this->cstToken = $sp8198cb->GetCstKeyFromSignOnTokenResult; } return $this; } public function getToken() { return $this->token; } public function getSsoToken() { if (is_null($this->ssoToken)) { $this->authSso(); } return $this->ssoToken; } public function getCstToken() { if (is_null($this->cstToken)) { $this->authSso(); $this->authCST(); } return $this->cstToken; } public function getCustomerByKey($spff115a = null) { return $this->OD()->request('GetCustomerByKey', array('parameters' => array('szCstKey' => is_null($spff115a) ? $this->getCstToken() : $spff115a))); } public function request($sp11fb61, array $sp315b9a = array(), $spb58ee7 = null) { try { if ($this->config->debug) { dd(colorize('Command is ' . $sp11fb61, 'yellow')); } if (!isset($sp315b9a['parameters']['AuthToken']) && isset($this->token)) { $sp315b9a['parameters']['AuthToken'] = $this->token; $spb58ee7 = new \SoapHeader('http://www.avectra.com/OnDemand/2005/', 'AuthorizationToken', array('Token' => $this->token)); if ($this->config->debug) { dd('SENDING HEADERS: '); dd($spb58ee7); } } $spd18364 = $this->__soapCall($sp11fb61, $sp315b9a, null, $spb58ee7); if ($this->config->debug) { dd(colorize(" <<< {$sp11fb61} Response Received _______", 'green') . '

'); dd($this->sp08e4a1($sp11fb61, $spd18364)); dd(colorize('________________', 'green') . '

'); } return $this->sp08e4a1($sp11fb61, $spd18364); } catch (\SoapFault $sp55c5a4) { $sp4e442f = $sp55c5a4->getMessage(); if (preg_match('/failed to load external entity/i', $sp4e442f)) { $sp4e442f = 'request failed, netForum did not respond to our request, try again.'; } throw new RuntimeException($sp4e442f, $sp55c5a4->getCode(), $sp55c5a4); } } private function sp08e4a1($sp11fb61, $sp8198cb) { $speaa66a = $sp11fb61 . 'Result'; if (!isset($sp8198cb->{$speaa66a}->any)) { return $sp8198cb; } libxml_use_internal_errors(true); $sp8198cb = simplexml_load_string($sp8198cb->{$speaa66a}->any); $sp8198cb = is_object($sp8198cb) && isset($sp8198cb->Result) ? $sp8198cb->Result : $sp8198cb; return sizeof($sp8198cb) ? $sp8198cb : array(); } protected function OD() { $this->auth(); if (!isset($this->od)) { if (preg_match('/signon/', $this->wsdl)) { $speb990b = $this->setWsdlPage('netforumxmlondemand.wsdl'); } else { $speb990b = $this->setWsdlPage('netFORUMXMLONDemand.asmx'); } $this->od = new static($speb990b, $this->wsdl_params); } $this->od->token = $this->token; $this->od->ssoToken = $this->ssoToken; $this->od->cstToken = $this->cstToken; return $this->od; } protected function getWsdlPage($speb3f73, $sp359be6 = null) { if (is_null($sp359be6)) { $sp359be6 = $this->wsdl; } $sp9e887c = parse_url($sp359be6); $sp9e887c['path'] = dirname($sp9e887c['path']) . '/' . $speb3f73; return http_build_url($sp359be6, $sp9e887c); } }