<?php
namespace Netforum; use Netforum\Traits\SingletonTrait; use Netforum\Exceptions\RuntimeException; class Request extends \SoapClient { use SingletonTrait; protected $config; protected $token; protected $ssoToken; protected $cstToken; public function __construct($sp71586c, array $sp339e89) { $this->config = (object) $sp339e89; $this->wsdl = $sp71586c; $this->wsdl_params = $this->constructParams($sp339e89); parent::__construct($sp71586c, $this->wsdl_params); return $this; } public function getTimeout() { return (int) $this->config->timeout; } public function setTimeout(int $sp1ff59b) { $this->config->timeout = $sp1ff59b; } public function getSoapVersion() { return SOAP_1_2; } protected function constructParams(array $spb0b8f3) { if ($this->config->debug) { $spb0b8f3 += array('trace' => true); } $spb0b8f3 += array('exceptions' => true, 'soap_version' => $this->getSoapVersion(), 'connection_timeout' => $this->getTimeout(), 'default_socket_timeout' => $this->getTimeout(), 'cache_wsdl' => WSDL_CACHE_BOTH, 'features' => SOAP_SINGLE_ELEMENT_ARRAYS, 'encoding' => 'UTF-8', 'user_agent' => 'NetForum Api (Simple) by FusionSpan llc.'); return array_filter($spb0b8f3); } public function __doRequest($sp21541d, $sp311ea2, $sp270203, $spd9a162, $sp051787 = 0) { ini_set('default_socket_timeout', $this->getTimeout()); if ($this->config->debug) { dd(colorize(' >>> Sending Request _______', 'blue')); dd(colorize('Params: 
Request: ' . prettyXML($sp21541d) . "\nLocation: {$sp311ea2}\nAction: {$sp270203}\nVersion: {$spd9a162}", 'blue')); dd(colorize('________________', 'blue') . '

'); } return parent::__doRequest($sp21541d, $sp311ea2, $sp270203, $spd9a162); } public function auth() { $sp2c2d9d = $this->request('Authenticate', array('parameters' => array('userName' => $this->config->username, 'password' => $this->config->password))); if (is_object($sp2c2d9d)) { $this->token = $sp2c2d9d->AuthenticateResult; } return $this; } public function authSso($spf7500b = null, $sp18240e = null) { if (is_null($spf7500b) && is_null($sp18240e) && !$this->config->credentials) { throw new \Exception('Client credentials are required.'); } if (is_null($spf7500b) && is_null($sp18240e) && $this->config->credentials) { $spf7500b = $this->config->credentials['username']; $sp18240e = $this->config->credentials['password']; } $sp2c2d9d = $this->auth()->request('GetSignOnToken', array('parameters' => array('Email' => $spf7500b, 'Password' => $sp18240e, 'Minutes' => $this->config->ttl))); if (is_object($sp2c2d9d) && isset($sp2c2d9d->GetSignOnTokenResult)) { $this->ssoToken = array_pop(explode('=', $sp2c2d9d->GetSignOnTokenResult)); } return $this; } public function authCST() { $sp2c2d9d = $this->auth()->request('GetCstKeyFromSignOnToken', array('parameters' => array('szEncryptedSingOnToken' => $this->ssoToken))); if (is_object($sp2c2d9d)) { $this->cstToken = $sp2c2d9d->GetCstKeyFromSignOnTokenResult; } return $this; } public function getToken() { return $this->token; } public function getSsoToken() { if (is_null($this->ssoToken)) { $this->authSso(); } return $this->ssoToken; } public function getCstToken() { if (is_null($this->cstToken)) { $this->authSso(); $this->authCST(); } return $this->cstToken; } public function getCustomerByKey($spce072b = null) { return $this->OD()->request('GetCustomerByKey', array('parameters' => array('szCstKey' => is_null($spce072b) ? $this->getCstToken() : $spce072b))); } public function request($spf2f160, array $sp339e89 = array(), $sp4dc673 = null) { try { if ($this->config->debug) { dd(colorize('Command is ' . $spf2f160, 'yellow')); } if (!isset($sp339e89['parameters']['AuthToken']) && isset($this->token)) { $sp339e89['parameters']['AuthToken'] = $this->token; $sp4dc673 = new \SoapHeader('http://www.avectra.com/OnDemand/2005/', 'AuthorizationToken', array('Token' => $this->token)); if ($this->config->debug) { dd('SENDING HEADERS: '); dd($sp4dc673); } } $spe7c14d = $this->__soapCall($spf2f160, $sp339e89, null, $sp4dc673); if ($this->config->debug) { dd(colorize(" <<< {$spf2f160} Response Received _______", 'green') . '

'); dd($this->sp090169($spf2f160, $spe7c14d)); dd(colorize('________________', 'green') . '

'); } return $this->sp090169($spf2f160, $spe7c14d); } catch (\SoapFault $sp89316e) { $sp90821a = $sp89316e->getMessage(); if (preg_match('/failed to load external entity/i', $sp90821a)) { $sp90821a = 'request failed, netForum did not respond to our request, try again.'; } throw new RuntimeException($sp90821a, $sp89316e->getCode(), $sp89316e); } } private function sp090169($spf2f160, $sp2c2d9d) { $sp72d52b = $spf2f160 . 'Result'; if (!isset($sp2c2d9d->{$sp72d52b}->any)) { return $sp2c2d9d; } libxml_use_internal_errors(true); $sp2c2d9d = simplexml_load_string($sp2c2d9d->{$sp72d52b}->any); $sp2c2d9d = is_object($sp2c2d9d) && isset($sp2c2d9d->Result) ? $sp2c2d9d->Result : $sp2c2d9d; return sizeof($sp2c2d9d) ? $sp2c2d9d : array(); } protected function OD() { $this->auth(); if (!isset($this->od)) { $sp71586c = $this->getWsdlPage('netforumxmlondemand.wsdl'); $this->od = new static($sp71586c, $this->wsdl_params); } $this->od->token = $this->token; $this->od->ssoToken = $this->ssoToken; $this->od->cstToken = $this->cstToken; return $this->od; } protected function getWsdlPage($sp08bb2d, $sp7ffc5e = null) { if (is_null($sp7ffc5e)) { $sp7ffc5e = $this->wsdl; } $sp7a32c3 = parse_url($sp7ffc5e); $sp7a32c3['path'] = dirname($sp7a32c3['path']) . '/' . $sp08bb2d; return http_build_url($sp7ffc5e, $sp7a32c3); } }